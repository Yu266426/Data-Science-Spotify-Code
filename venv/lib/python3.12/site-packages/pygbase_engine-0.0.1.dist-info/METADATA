Metadata-Version: 2.1
Name: pygbase-engine
Version: 0.0.1
Summary: A simple engine for pygame
Home-page: https://github.com/Yu266426/pygbase
Author: Yu266426
Author-email: Yu266426 <yu266426@gmail.com>
License: MIT License
        
        Copyright (c) 2023 Yu266426
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/Yu266426/pygbase
Keywords: pygame,pygame-ce,game
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pygame-ce >=2.3.0

# `pygbase-engine`

`pygbase-engine` is a simple engine for pygame that handles states, ui, resources, and more.
__________________
## Current Features
- Game States
  - Easily switch between states:
    - `set_next_state`, `set_next_state_type`
    - `enter` and `exit` methods for detecting changes
  - Has `update`, `fixed_update` (interval adjustable through settings), `draw`
__________________
- Resource Management
  - Loads folders containing assets using `Loader` game state, loads specifiable number of assets per frame (default `1`)
  - Custom config for each folder (`config.json`)
  - Built in types:
    - Images:
      - Config: scale and rotatable
      - Supports cached rotation, but uses large amount RAM for larger surfaces 
    - Sprite Sheets:
    - Config: `rows`, `columns`, `tile_width`, `tile_height`, `scale` (default -1, change to initialise), `rotatable`
  - Can specify custom resources:
    - Provide custom config and loader
    - Can specify initialised asset based on configs
_________________
- Event System / Input Manager
_________________
- Particle System
_________________
- UI system
_________________
## Whats Next
- Todo
